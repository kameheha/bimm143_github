---
title: "class13"
author: "Victor Yu"
format: pdf
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

You can add options to executable code like this 

```{r}
library(DESeq2)
```

Loads our Data File

```{r}
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"
```

```{r}
# Import metadata and take a peak
colData = read.csv("GSE37704_metadata.csv", row.names=1)
head(colData)
```

```{r}
# Import metadata and take a peak
colDataTimp = read.csv("GSE37704_featurecounts.csv", row.names=1)
head(colData)
```

>Q1 Coomplete the code below to remove the troublesome first column from countData

```{r}
#Note we need to remove the odd first $length col
countData <- as.matrix(colDataTimp[,-1])
head(countData)
```


>Q2: Coomplete the code below to filter countData to exclude genes (i.e rows)  where we have 0 read count across all samples (i.e. columns)

```{r}
#head(countData)

to.keep <-  rowSums(countData) > 0
countData <-  countData[to.keep,]

nrow(countData)
head(countData)
```

#DESeq Analysis

```{r}
head(colData)
```

Set up the object that DESeq needs for analysis with the lvoely long-winded function:

```{r}
#i Message: false 
dds = DESeqDataSetFromMatrix(countData = countData,
                             colData = colData,
                             design=~condition)
```

Run the analysis
```{r}
dds = DESeq(dds)
res <-  results (dds)
head(dds)
```
Q3. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.
```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
summary(res)
```
```{r}
plot( res$log2FoldChange, -log(res$padj) )
```
Q4. Improve this plot by completing the below code, which adds color and axis labels
```{r}
mycols <-  rep("gray" , nrow(res))
mycols [ abs(res$log2FoldChange) > 2] <- "blue"
mycols [res$padj > 0.05] = "gray"
  
plot(res$log2FoldChange, - log(res$padj), col = mycols)
abline (v=c(-2,2), lty = 2)
```

#Add gene annotaiton data

We will load up AnnotationDbi and our Human data package to add gene symbols and entrez IDS to our results object.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```


```{r}
columns(org.Hs.eg.db)

res$symbol = mapIds(org.Hs.eg.db,
                    keys=rownames(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name = mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```

Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file = "deseq_results.csv")
```


```{r}
#BiocManager::install( c("pathview", "gage", "gageData") )

library (pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
# Look at the first few down (less) pathways
head(keggres$less)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```
```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

Yes?

#Gene Ontology
```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)
```

```{r}
head (gobpres$less)
```

And reactome online

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

GO:0048285 organelle fission 1.536227e-15,  Yes, organelle fission occurs in cell cycle. Maybe the type of experimentation needed?
